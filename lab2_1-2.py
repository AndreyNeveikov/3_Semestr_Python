# 2. Создать класс матрица Данный класс содержит указатель на int, размер строк и столбцов
# и состояние ошибки. Определить конструктор без параметров, конструктор с одним параметром
# и конструктор с двумя параметрами, деструктор. Определить методы доступа: возвращать
# значение элемента (i,j) и адрес этого элемента. Определить функцию печати.
# Определить функции сложения и вычитания (матрицы с матрицей), умножение матрицы на матрицу.
# Определить умножение матрицы на число. Проверить работу этого класса. В случае нехватки памяти,
# несоответствия размерностей, выхода за пределы устанавливать код ошибки.

import numpy as np

class Matrix:

    nrows = 3
    ncols = 3

    A = np.random.randint(50, size=(nrows, ncols))
    B = np.random.randint(50, size=(nrows, ncols))

matrix = Matrix()
print(str(matrix.A) + " - Матрица А\n")
print(str(matrix.B) + " - Матрица B\n")

matrixC = Matrix()
matrixC = matrix.A + matrix.B
print(str(matrixC) + " - результат сложения\n")

matrixC = Matrix()
matrixC = matrix.A - matrix.B
print(str(matrixC) + " - результат вычитания\n")

print("Введите число на которое будет умножена матрица А")
koef = input()

matrixC = Matrix()
matrixC = matrix.A * int(koef)
print(str(matrixC) + " - результат умножения матрицы A на число " + str(koef) + "\n")

matrixC = Matrix()
matrixC = matrix.A * matrix.B
print(str(matrixC) + " - результат умножения матриц А и B\n")


# 4. Создать класс матрица Данный класс содержит указатель на float,
# размер строк и столбцов и состояние ошибки. Определить конструктор без
# параметров, конструктор с одним параметром и конструктор с двумя параметрами,
# деструктор. Определить методы доступа: возвращать значение элемента (i,j)
# и адрес этого элемента. Определить функцию печати. Определить функции сложения
# и вычитания (матрицы с матрицей), умножение матрицы на матрицу. Определить умножение
# матрицы на число. Проверить работу этого класса. В случае нехватки памяти, несоответствия
# размерностей, выхода за пределы устанавливать код ошибки.

class Matrix2:

    A = np.array([[2., 4., 8.], [5., -6., -6.], [5., -6., 1.]])
    B = np.array([[9., -3., 9.], [3., 6., 2.], [5., -6., 7.]])


matrix2 = Matrix2()
print(str(matrix2.A) + " - Матрица А\n")
print(str(matrix2.B) + " - Матрица B\n")

matrixC2 = Matrix2()
matrixC2 = matrix2.A + matrix2.B
print(str(matrixC2) + " - результат сложения\n")

matrixC2 = Matrix2()
matrixC2 = matrix2.A - matrix2.B
print(str(matrixC2) + " - результат вычитания\n")

print("Введите число на которое будет умножена матрица А")
koef2 = input()

matrixC2 = Matrix2()
matrixC2 = matrix2.A * float(koef2)
print(str(matrixC) + " - результат умножения матрицы A на число " + str(koef2) + "\n")

matrixC2 = Matrix2()
matrixC2 = matrix2.A * matrix2.B
print(str(matrixC2) + " - результат умножения матриц А и B\n")

matrixC2 = Matrix2()
matrixC2 = matrix2.A / matrix2.B
print(str(matrixC2) + " - результат деления матриц А и B\n")

